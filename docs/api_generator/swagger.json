{"basePath": "/", "consumes": ["application/json"], "definitions": {"App Name": {"properties": {"app_name": {"description": "Exact name of app", "example": "simple-example", "type": "string"}}, "required": ["app_name"], "type": "object"}, "Application": {"properties": {"default_output": {"description": "The default output for the application. The default output will be returned whenever an application is unable to receive a response from a model within the specified query latency SLO (service level objective). The reason the default output was returned is always provided as part of the prediction response object.", "example": "[42.0]", "type": "string"}, "input_type": {"description": "The type of the request data this endpoint can process. Input type can be one of \"integers\", \"floats\", \"doubles\", \"bytes\", or \"strings\".", "enum": ["integers", "floats", "doubles", "bytes", "strings"], "example": "doubles", "type": "string"}, "latency_slo_micros": {"description": "The query latency objective for the application in microseconds. This is the processing latency between Clipper receiving a request and sending a response. It does not account for network latencies before a request is received or after a response is sent. If Clipper cannot process a query within the latency objective, the default output is returned. Therefore, it is recommended that he SLO not be set aggressively low unless absolutely necessary. 100000 (100ms) is a good starting value, but the optimal latency objective will vary depending on the application.", "example": 100000, "type": "integer"}, "name": {"description": "The unique name of the application.", "example": "simple-app", "type": "string"}}, "required": ["default_output", "input_type", "latency_slo_micros", "name"], "type": "object"}, "Link": {"properties": {"app_name": {"description": "The name of the application", "example": "sum-application", "type": "string"}, "model_names": {"description": "List of  The name of the model to link to the application", "example": ["basic-sum-1"], "items": {"type": "string"}, "type": "array"}}, "required": ["app_name", "model_names"], "type": "object"}, "Model": {"properties": {"batch_size": {"description": "The user-defined query batch size for the model. Replicas of the model will attempt to process at most `batch_size` queries simultaneously. They may process smaller batches if `batch_size` queries are not immediately available. If the default value of -1 is used, Clipper will adaptively calculate the batch size for individual replicas of this model.", "example": 10, "type": "integer"}, "container_name": {"description": "A docker image name. If provided, the image will be recorded as part of the model descrtipin in Clipper when registering the model but this method will make no attempt to launch any containers with this image.", "example": "clipper/example-container", "type": "string"}, "input_type": {"description": "The type of the request data this endpoint can process. Input type can be one of \"integers\", \"floats\", \"doubles\", \"bytes\", or \"strings\". See the http://clipper.ai/tutorials/basic_concepts/#input-types for more details on picking the right input type for your application.", "enum": ["integers", "floats", "doubles", "bytes", "strings"], "example": "doubles", "type": "string"}, "labels": {"description": "A list of strings annotating the model. These are ignored by Clipper and used purely for user annotations.", "example": ["Team: DevOps"], "items": {"type": "string"}, "type": "array"}, "model_name": {"description": "The name of the deployed model. The model name must be valid DNS-1123 subdomains. Each must consist of lower case alphanumeric characters, \u2018-\u2018 or \u2018.\u2019, and must start and end with an alphanumeric character (e.g. \u2018example.com\u2019, regex used for validation is `[a-z0-9]([-a-z0-9]*[a-z0-9])?Z`.", "example": "sum-model", "type": "string"}, "model_version": {"description": "The version to assign this model. Versions must be unique on a per-model basis, but may be re-used across different models. The model version must be valid DNS-1123 subdomains. Each must consist of lower case alphanumeric characters, \u2018-\u2018 or \u2018.\u2019, and must start and end with an alphanumeric character (e.g. \u2018example.com\u2019, regex used for validation is `[a-z0-9]([-a-z0-9]*[a-z0-9])?Z`.", "example": "1", "type": "string"}}, "required": ["batch_size", "container_name", "input_type", "model_name", "model_version"], "type": "object"}, "Model Container": {"properties": {"input_type": {"description": "The type of the request data this endpoint can process. Input type can be one of \"integers\", \"floats\", \"doubles\", \"bytes\", or \"strings\". See the http://clipper.ai/tutorials/basic_concepts/#input-types for more details on picking the right input type for your application.", "enum": ["integers", "floats", "doubles", "bytes", "strings"], "example": "doubles", "type": "string"}, "model_id": {"description": "Automatically assigned model id", "example": "simple-example:1", "type": "string"}, "model_name": {"description": "The name of the deployed model. The model name must be valid DNS-1123 subdomains. Each must consist of lower case alphanumeric characters, \u2018-\u2018 or \u2018.\u2019, and must start and end with an alphanumeric character (e.g. \u2018example.com\u2019, regex used for validation is `[a-z0-9]([-a-z0-9]*[a-z0-9])?Z`.", "example": "simple-example", "type": "string"}, "model_replica_id": {"description": "Automatically Assgined Replica ID", "example": 1, "type": "integer"}, "model_version": {"description": "The version to assign this model. Versions must be unique on a per-model basis, but may be re-used across different models. The model version must be valid DNS-1123 subdomains. Each must consist of lower case alphanumeric characters, \u2018-\u2018 or \u2018.\u2019, and must start and end with an alphanumeric character (e.g. \u2018example.com\u2019, regex used for validation is `[a-z0-9]([-a-z0-9]*[a-z0-9])?Z`.", "example": "1", "type": "string"}}, "required": ["model_id", "model_name", "model_version"], "type": "object"}, "Model Version": {"properties": {"model_name": {"description": "The name of the model", "example": "sum_model", "type": "string"}, "model_version": {"description": "str | obj with __str__ representation. The version of the model. Note that `version` must be a model version that has already been deployed.", "example": "1", "type": "string"}}, "required": ["model_name", "model_version"], "type": "object"}, "Name": {"properties": {"name": {"description": "Exact name of app", "example": "simple-example", "type": "string"}}, "required": ["name"], "type": "object"}, "Query Input": {"properties": {"input": {"description": "The query input as list.", "items": {"example": 2.3, "type": "object"}, "type": "array"}}, "required": ["input"], "type": "object"}, "Query Result": {"properties": {"default": {"description": "Whether or not this result is default response due to SLO", "example": "false", "type": "boolean"}, "output": {"description": "The prediction output.", "example": 2.2, "type": "object"}, "query_id": {"example": 42, "type": "integer"}}, "type": "object"}, "Verbosity": {"properties": {"verbose": {"description": "If False, only necessary values like names will be returned; if True, more information will be provided.", "example": "true", "type": "boolean"}}, "required": ["verbose"], "type": "object"}}, "info": {"description": "REST API for instrumenting with Clipper. \n\nThere are two frontend avaliable for query. \n- In admin frontend, you can manage your applications and models. \n- In query frontend, you can send query to depolyed models. \n\nThe admin address can be obtained from querying `ClipperConnection.cm.get_admin_addr()`. \n\nThe query address can be obtained from querying `ClipperConnection.cm.get_query_addr()`.", "title": "Clipper API", "version": "0.2.0"}, "paths": {"/admin/add_app": {"post": {"description": "Register a new application with Clipper.\n\nAn application in Clipper corresponds to a named REST endpoint that can be used to request\npredictions. This command will attempt to create a new endpoint with the provided name.\nApplication names must be unique. This command will fail if an application with the provided\nname already exists.", "operationId": "post_add_application", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Application"}}], "responses": {"200": {"description": "OK"}, "400": {"description": "Bad Request"}}, "summary": "add_app", "tags": ["admin_addr"]}}, "/admin/add_model": {"post": {"description": "Registers a new model version with Clipper.\n\nThis method does not launch any model containers, it only registers the model description\n(metadata such as name, version, and input type) with Clipper. A model must be registered\nwith Clipper before it can be linked to an application.\n\nYou should rarely have to use this method directly. Using one the Clipper deployer\nmethods in `clipper_admin.deployers` or calling ``build_and_deploy_model`` or\n``deploy_model`` will automatically register your model with Clipper.", "operationId": "post_add_model", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Model"}}], "responses": {"200": {"description": "OK"}, "400": {"description": "Bad Request"}}, "summary": "add_model", "tags": ["admin_addr"]}}, "/admin/add_model_links": {"post": {"description": "Routes requests from the specified app to be evaluted by the specified model.\n\nNote:\n\nBoth the specified model and application must be registered with Clipper, and they\nmust have the same input type. If the application has previously been linked to a different\nmodel, this command will fail.", "operationId": "post_add_model_links", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Link"}}], "responses": {"200": {"description": "OK"}, "400": {"description": "Bad Request"}}, "summary": "add_model_links", "tags": ["admin_addr"]}}, "/admin/get_all_applications": {"post": {"description": "Gets information about all applications registered with Clipper.\n\nIf 'verbose' is set to False, the returned list contains the apps' names; \nif 'verbose' set to True, the list contains application info dictionaries.\nThese dictionaries have the same attribute name-value pairs that were\nprovided to `clipper_admin.ClipperConnection.register_application`.\n\nReturns a list of information about all apps registered to Clipper.\nIf no apps are registered with Clipper, an empty list is returned.", "operationId": "post_get_all_app", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Verbosity"}}], "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Application"}, "type": "array"}}, "400": {"description": "Bad Request"}}, "summary": "get_all_applications", "tags": ["admin_addr"]}}, "/admin/get_all_containers": {"post": {"description": "Gets information about all model containers registered with Clipper.\n\nIf 'verbose' is set to False, the returned list contains the apps' names.\nIf 'verbose' is set to True, the list contains container info dictionaries.\n\nReturns a list of information about all model containers known to Clipper.\nIf no containers are registered with Clipper, an empty list is returned.", "operationId": "post_get_all_containers", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Verbosity"}}], "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Model Container"}, "type": "array"}}, "400": {"description": "Bad Request"}}, "summary": "get_all_containers", "tags": ["admin_addr"]}}, "/admin/get_all_models": {"post": {"description": "Gets information about all models registered with Clipper.\n\nIf 'verbose' is set to False, the returned list contains the models' names.\nIf 'verbose' set to True, the list contains model info dictionaries.\n\nReturns a list of information about all apps registered to Clipper.\nIf no models are registered with Clipper, an empty list is returned.", "operationId": "post_get_app_model", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Verbosity"}}], "responses": {"200": {"description": "Success", "schema": {"items": {"$ref": "#/definitions/Model"}, "type": "array"}}, "400": {"description": "Bad Request"}}, "summary": "get_all_models", "tags": ["admin_addr"]}}, "/admin/get_application": {"post": {"description": "Gets detailed information about a registered application.\n\n'name' parameter is the name of the application to look up.\n\nReturns a dictionary with the specified application's info. This\nwill contain the attribute name-value pairs that were provided to\n`clipper_admin.ClipperConnection.register_application`.\nIf no application with name ``name`` is\nregistered with Clipper, None is returned.", "operationId": "post_get_app", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Name"}}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Application"}}, "400": {"description": "Bad Request"}}, "summary": "get_application", "tags": ["admin_addr"]}}, "/admin/get_container": {"post": {"description": "Gets detailed information about a registered container.\n\n'name' is the name of the container to look up\n\n'version' is the version of the container to look up\n\n'replica_id' is the container replica to look up\n\nReturns a dictionary with the specified container's info.\nIf no corresponding container is registered with Clipper, None is returned.", "operationId": "post_get_container", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Model Container"}}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Model Container"}}, "400": {"description": "Bad Request"}}, "summary": "get_container", "tags": ["admin_addr"]}}, "/admin/get_linked_models": {"post": {"description": "Retrieves the models linked to the specified application.\n\n'app_name' parameter is the name of the application\n\nReturns a list of the names of models linked to the app.\nIf no models are linked to the specified app, None is returned.", "operationId": "post_get_linked_model", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/App Name"}}], "responses": {"200": {"description": "Success", "schema": {"items": {"example": "Model Name", "type": "string"}, "type": "array"}}, "400": {"description": "Bad Request"}}, "summary": "get_linked_models", "tags": ["admin_addr"]}}, "/admin/get_model": {"post": {"description": "Gets detailed information about a registered model.\n\n'model_name' is the name of the model to look up\n\n'model_version' is the version of the model to look up\n\nReturns a dictionary with the specified model's info.\nIf no model with name `model_name@model_version` is\nregistered with Clipper, None is returned.", "operationId": "post_get_model", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Model Version"}}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Model"}}, "400": {"description": "Bad Request"}}, "summary": "get_model", "tags": ["admin_addr"]}}, "/admin/set_model_version": {"post": {"description": "Changes the current model version to \"model_version\".\n\nThis method can be used to perform model roll-back and roll-forward. The\nversion can be set to any previously deployed version of the model.\n\nNote:\n\nModel versions automatically get updated when\n`clipper_admin.ClipperConnection.deploy_model()` is called. There is no need to\nmanually update the version after deploying a new model.", "operationId": "post_set_model_version", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Model Version"}}], "responses": {"200": {"description": "OK"}, "400": {"description": "Bad Request"}}, "summary": "set_model_version", "tags": ["admin_addr"]}}, "/query_addr/{application_name}/predict": {"parameters": [{"description": "The name of appplication to query.", "in": "path", "name": "application_name", "required": true, "type": "string"}], "post": {"description": "Submit a new query to application. The application name needs to specified in \nthe path; and data needs to be submitted via a POST Json request.", "operationId": "post_metric", "parameters": [{"in": "body", "name": "payload", "required": true, "schema": {"$ref": "#/definitions/Query Input"}}], "responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/Query Result"}}, "400": {"description": "Bad Request"}}, "summary": "predict", "tags": ["query_addr"]}}}, "produces": ["application/json"], "responses": {"MaskError": {"description": "When any error occurs on mask"}, "ParseError": {"description": "When a mask can't be parsed"}}, "swagger": "2.0", "tags": [{"description": "Admin Address", "name": "admin_addr"}, {"description": null, "name": "query_addr"}]}